# -*- coding: utf-8 -*-
"""IgFold.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Graylab/IgFold/blob/main/IgFold.ipynb

# **IgFold**: Fast, accurate antibody structure prediction

Official notebook for [IgFold](https://www.biorxiv.org/content/10.1101/2022.04.20.488972): Fast, accurate antibody structure prediction from deep learning on massive set of natural antibodies.  The code, data, and weights for this work are made available for non-commercial use. For commercial inquiries, please contact `jruffolo[at]jhu.edu`.

##Installation in Colab/ Jupyter Notebook/ Dependency Installation
"""

# 1. Uninstall and clean up potentially conflicting core packages
print("1. Uninstalling old torch and core dependencies...")
!pip uninstall torch torchvision torchaudio transformers numpy -y

# 2. Installing modern PyTorch...
!pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118

# 3. Install IgFold/ dependencies
print("3. Installing IgFold and base dependencies...")
!pip install igfold --upgrade

# 4. Installing visualization (py3Dmol) and ensuring core versions...
print("4. Installing visualization (py3Dmol) and ensuring core versions...")
!pip install py3Dmol
!pip install transformers --upgrade

# 5. Installing OpenMM refinement dependencies (pdbfixer, openmm) using Conda...
print("5. Installing OpenMM refinement dependencies (pdbfixer, openmm) using Conda...")

# Install condacolab (to use conda/mamba in Google Colab)
!pip install -q condacolab

# Restart session to finalize condacolab setup
import condacolab
condacolab.install()

# Use mamba to install the scientific packages from the trusted conda-forge channel
# Crucially, we remove the explicit Python version pinning that caused the conflict
!mamba install -c conda-forge openmm pdbfixer -y

print("OpenMM and PDBFixer installation complete.")

# 6. Install missing dependency for antibody renumbering (abnumber)
print("6. Installing abnumber...")
!pip install abnumber


print("\nInstallation complete. Please RESTART THE SESSION now (Runtime -> Restart session).")

"""##Reload imports/definitions cell"""

# Initialization process / prepare environment
import os
import torch
import torch.serialization
from igfold import IgFoldRunner
import py3Dmol

# Imports for model deserialization (required by IgFold's loading mechanism)
from transformers.models.bert.configuration_bert import BertConfig
from transformers.models.bert.tokenization_bert import BertTokenizer
from transformers.tokenization_utils import Trie
from transformers.models.bert.tokenization_bert import BasicTokenizer
from transformers.models.bert.tokenization_bert import WordpieceTokenizer

# Core IgFold utility import (note: show_pdb is an optional viz function)
from igfold.utils.visualize import show_pdb

# 1. Setup/ configuration
# Define sequences
SEQUENCES = {
    "H": "QVQLQESGPGLVKPSQTLSLTCAISGDSVSSNSAAWNWIRQSPSRGLEWLGRTYYRSKWYNDYAVSVRRFTISRDDSKNTVYLQMNSLRAEDTAVYYCARYYYYYYGMDYWGQGSLVTVSS",
    "L": "DIQMTQSPSSLSASVGDRVTITCKASQSVSANDVVAWYQQKPGKAPKLVIYWASTRESGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCLQHFWSTPRTFGQGTKVEIK"
}

# Define output path and file name
ANTIBODY_NAME = "chimeric_anti-OKT3_scFv"
PRED_DIR = "igfold_predictions"
DO_REFINE = False
DO_RENUM = False
USE_OPENMM = False
NUM_MODELS = 4

# Create output directory/ file path (must run once)
if not os.path.exists(PRED_DIR):
    os.makedirs(PRED_DIR)
pred_pdb_path = os.path.join(PRED_DIR, f"{ANTIBODY_NAME}.pdb")

# 2. Folding execution
if __name__ == "__main__":
    # Load IgFold models using the patched safe_globals context manager
    with torch.serialization.safe_globals({BertConfig, BertTokenizer, Trie, BasicTokenizer, WordpieceTokenizer}):
        print(f"Initializing IgFoldRunner with {NUM_MODELS} models...")
        igfold = IgFoldRunner(num_models=NUM_MODELS)
        print("Successfully loaded IgFold and AntiBERTy models.")

    # Perform folding prediction
    print(f"\nFolding sequences for {ANTIBODY_NAME}...")

    igfold.fold(
        pred_pdb_path,
        sequences=SEQUENCES,
        do_refine=DO_REFINE,
        use_openmm=USE_OPENMM,
        do_renum=DO_RENUM,
    )

    print(f"Structure successfully saved to {pred_pdb_path}")

    # Display final structure using igfold's utility
    show_pdb(
        pred_pdb_path,
        len(SEQUENCES),
        bb_sticks=False,
        sc_sticks=True,
        color="rainbow"
    )

# 3. Visualization with py3Dmol (Use PRED_DIR and ANTIBODY_NAME for consistency)
# This code runs *outside* the if __name__ == "__main__": block
pdb_file = os.path.join(PRED_DIR, f"{ANTIBODY_NAME}.pdb")

# Create and display the py3Dmol view
view = py3Dmol.view(query=f'pdb:{pdb_file}', width=800, height=600)
view.setStyle({'cartoon': {'color': 'spectrum'}})
view.zoomTo()
view.show()

"""##Structural Prediction of chimeric_anti_OKT3_scFv"""

# Initialization process/ prepare environment

import os
import torch
import torch.serialization # Include torch directly after restart
from igfold import IgFoldRunner
import py3Dmol # For visualization

# Imports for model deserialization
from transformers.models.bert.configuration_bert import BertConfig
from transformers.models.bert.tokenization_bert import BertTokenizer
from transformers.tokenization_utils import Trie
from transformers.models.bert.tokenization_bert import BasicTokenizer
from transformers.models.bert.tokenization_bert import WordpieceTokenizer

# Core IgFold and visualization imports
from igfold.utils.visualize import show_pdb
from igfold import IgFoldRunner

# 1. Setup/ configuration

# Define sequences
SEQUENCES = {
    "H": "QVQLQESGPGLVKPSQTLSLTCAISGDSVSSNSAAWNWIRQSPSRGLEWLGRTYYRSKWYNDYAVSVRRFTISRDDSKNTVYLQMNSLRAEDTAVYYCARYYYYYYGMDYWGQGSLVTVSS",
    "L": "DIQMTQSPSSLSASVGDRVTITCKASQSVSANDVVAWYQQKPGKAPKLVIYWASTRESGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCLQHFWSTPRTFGQGTKVEIK"
}

# Define output path and file name
ANTIBODY_NAME = "chimeric_anti-OKT3_scFv"
PRED_DIR = "igfold_predictions"

# Execution flags (set to FALSE as the environment could not support these dependencies)
DO_REFINE = False
DO_RENUM = False
USE_OPENMM = False
NUM_MODELS = 4

# Create output directory/ file path (can be run safely multiple times)
if not os.path.exists(PRED_DIR):
    os.makedirs(PRED_DIR)
pred_pdb_path = os.path.join(PRED_DIR, f"{ANTIBODY_NAME}.pdb")

# 2. Folding execution

if __name__ == "__main__":
    # Create output directory/ file path
    if not os.path.exists(PRED_DIR):
        os.makedirs(PRED_DIR)
    pred_pdb_path = os.path.join(PRED_DIR, f"{ANTIBODY_NAME}.pdb")

    # Load IgFold models using the patched safe_globals context manager
    with torch.serialization.safe_globals({BertConfig, BertTokenizer, Trie, BasicTokenizer, WordpieceTokenizer}):
        print(f"Initializing IgFoldRunner with {NUM_MODELS} models...")
        igfold = IgFoldRunner(num_models=NUM_MODELS)
        print("Successfully loaded IgFold and AntiBERTy models.")

    # Perform folding prediction
    print(f"\nFolding sequences for {ANTIBODY_NAME}...")

    igfold.fold(
        pred_pdb_path,
        sequences=SEQUENCES,
        do_refine=DO_REFINE,
        use_openmm=USE_OPENMM,
        do_renum=DO_RENUM,
    )

    print(f"Structure successfully saved to {pred_pdb_path}")

    # Display final structure
    show_pdb(
        pred_pdb_path,
        len(SEQUENCES),
        bb_sticks=False,
        sc_sticks=True,
        color="rainbow"
    )

"""##Visualization of chimeric_anti_OKT3_scFv"""

import os
import py3Dmol

ANTIBODY_NAME = "chimeric_anti-OKT3_scFv"
PRED_DIR = "igfold_predictions"
pdb_file = os.path.join(PRED_DIR, f"{ANTIBODY_NAME}.pdb")

# read the PDB file contents into a string
with open(pdb_file, 'r') as f:
    pdb_data = f.read()

# create the view
view = py3Dmol.view(width=800, height=600)

# add model data directly
view.addModel(pdb_data, 'pdb')

# apply styling and display
view.setStyle({'cartoon': {'color': 'spectrum'}})
view.zoomTo()
view.show()

# Define the prediction directory name (IgFold default)
pred_dir = "igfold_predictions"

# Define the name of your sequence (as used in the prediction step)
name = "chimeric_anti-OKT3_scFv"

#@title Plot per-residue predicted RMSD

prmsd_fig_file = os.path.join(pred_dir, f"{name}_prmsd.png")
plot_prmsd(sequences, pred.prmsd.cpu(), prmsd_fig_file, shade_cdr=do_renum, pdb_file=pred_pdb)

#@title Show predicted structure with predicted RMSD

#@markdown Structure is colored from low (blue) to high (red) pRMSD.

show_pdb(pred_pdb, len(sequences), bb_sticks=False, sc_sticks=True, color="b")

#@title Download results

#@markdown Download zip file containing structure prediction and annotation results. If download fails, results are also accessible from file explorer on the left panel of the notebook.

from google.colab import files
import locale
locale.getpreferredencoding = lambda: "UTF-8"

!zip -FSr $name".result.zip" $pred_dir/ &> /dev/null
files.download(f"{name}.result.zip")